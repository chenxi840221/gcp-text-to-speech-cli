# Cloud Build configuration for Text-to-Speech API
# Implements CI/CD pipeline following VIPER architecture principles

steps:
  # Step 1: Run unit tests
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install -r requirements.txt
        python -m pytest tests/unit/ -v --tb=short
    id: 'unit-tests'

  # Step 2: Run integration tests
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install -r requirements.txt
        python -m pytest tests/integration/ -v --tb=short
    id: 'integration-tests'
    waitFor: ['unit-tests']

  # Step 3: Security scan
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        gcloud components install local-extract
        gcloud beta code-security scan --source=. --language=python
    id: 'security-scan'
    waitFor: ['integration-tests']

  # Step 4: Build container image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/tts-api:latest',
      '.'
    ]
    id: 'build-image'
    waitFor: ['security-scan']

  # Step 5: Vulnerability scanning
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        gcloud container images scan gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA \
          --remote --format='value(discovery.vulnerabilityInfo.vulnerabilityCount)'
    id: 'vulnerability-scan'
    waitFor: ['build-image']

  # Step 6: Push container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA']
    id: 'push-image'
    waitFor: ['vulnerability-scan']

  # Step 7: Deploy to Cloud Run (Development)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - tts-api-dev
      - --image=gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA
      - --region=us-central1
      - --platform=managed
      - --allow-unauthenticated
      - --set-env-vars=GOOGLE_CLOUD_PROJECT=$PROJECT_ID
      - --set-env-vars=TTS_BUCKET_NAME=$PROJECT_ID-tts-audio-dev
      - --set-env-vars=VERTEX_AI_LOCATION=us-central1
      - --set-env-vars=ENVIRONMENT=development
      - --memory=2Gi
      - --cpu=2
      - --concurrency=50
      - --max-instances=5
    id: 'deploy-dev'
    waitFor: ['push-image']

  # Step 8: Run end-to-end tests against development deployment
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install -r requirements.txt
        export SERVICE_URL=$(gcloud run services describe tts-api-dev --region=us-central1 --format='value(status.url)')
        python -m pytest tests/e2e/ -v --tb=short --service-url=$SERVICE_URL
    id: 'e2e-tests'
    waitFor: ['deploy-dev']

  # Step 9: Deploy API Gateway configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        # Update OpenAPI spec with correct backend URL
        SERVICE_URL=$(gcloud run services describe tts-api-dev --region=us-central1 --format='value(status.url)')
        sed "s|http://localhost:8080|$SERVICE_URL|g" docs/api/openapi.yaml > /tmp/openapi-updated.yaml

        # Deploy API Gateway config
        gcloud api-gateway api-configs create tts-config-$BUILD_ID \
          --api=tts-api-dev \
          --openapi-spec=/tmp/openapi-updated.yaml \
          --backend-auth-service-account=tts-api@$PROJECT_ID.iam.gserviceaccount.com || true

        # Update gateway
        gcloud api-gateway gateways update tts-gateway-dev \
          --api=tts-api-dev \
          --api-config=tts-config-$BUILD_ID \
          --location=us-central1 || true
    id: 'deploy-api-gateway'
    waitFor: ['e2e-tests']

  # Step 10: Performance testing
  - name: 'loadimpact/k6'
    entrypoint: k6
    args:
      - run
      - --vus=10
      - --duration=30s
      - tests/performance/load-test.js
    env:
      - 'SERVICE_URL=$(gcloud run services describe tts-api-dev --region=us-central1 --format="value(status.url)")'
    id: 'performance-test'
    waitFor: ['deploy-api-gateway']

  # Step 11: Deploy to production (manual approval required)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - tts-api-prod
      - --image=gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA
      - --region=us-central1
      - --platform=managed
      - --allow-unauthenticated
      - --set-env-vars=GOOGLE_CLOUD_PROJECT=$PROJECT_ID
      - --set-env-vars=TTS_BUCKET_NAME=$PROJECT_ID-tts-audio-prod
      - --set-env-vars=VERTEX_AI_LOCATION=us-central1
      - --set-env-vars=ENVIRONMENT=production
      - --memory=4Gi
      - --cpu=2
      - --concurrency=100
      - --max-instances=20
      - --min-instances=1
    id: 'deploy-production'
    waitFor: ['performance-test']

  # Step 12: Update production API Gateway
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        # Update OpenAPI spec with production backend URL
        SERVICE_URL=$(gcloud run services describe tts-api-prod --region=us-central1 --format='value(status.url)')
        sed "s|http://localhost:8080|$SERVICE_URL|g" docs/api/openapi.yaml > /tmp/openapi-prod.yaml

        # Deploy production API Gateway config
        gcloud api-gateway api-configs create tts-config-prod-$BUILD_ID \
          --api=tts-api-prod \
          --openapi-spec=/tmp/openapi-prod.yaml \
          --backend-auth-service-account=tts-api@$PROJECT_ID.iam.gserviceaccount.com

        # Update production gateway
        gcloud api-gateway gateways update tts-gateway-prod \
          --api=tts-api-prod \
          --api-config=tts-config-prod-$BUILD_ID \
          --location=us-central1
    id: 'deploy-production-gateway'
    waitFor: ['deploy-production']

  # Step 13: Smoke tests in production
  - name: 'python:3.11-slim'
    entrypoint: bash
    args:
      - -c
      - |
        pip install requests
        GATEWAY_URL=$(gcloud api-gateway gateways describe tts-gateway-prod --location=us-central1 --format='value(defaultHostname)')
        python -c "
        import requests
        import sys

        # Test health endpoint
        response = requests.get(f'https://{GATEWAY_URL}/health')
        if response.status_code != 200:
            print('Health check failed')
            sys.exit(1)

        print('Production smoke tests passed')
        "
    id: 'production-smoke-tests'
    waitFor: ['deploy-production-gateway']

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  substitution_option: ALLOW_LOOSE
  dynamic_substitutions: true
  env:
    - 'PYTHONPATH=/workspace'

# Timeout for the entire build
timeout: 3600s

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/tts-api:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/tts-api:latest'

# Substitutions for variable replacement
substitutions:
  _ENVIRONMENT: 'development'
  _REGION: 'us-central1'
  _SERVICE_ACCOUNT: 'tts-api@${PROJECT_ID}.iam.gserviceaccount.com'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts'
    paths:
      - 'docs/api/openapi.yaml'
      - 'tests/results/**'