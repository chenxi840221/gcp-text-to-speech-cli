version: '3.8'

services:
  # Main TTS API service
  tts-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-your-project-id}
      - TTS_BUCKET_NAME=${TTS_BUCKET_NAME:-your-project-tts-audio}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - ENVIRONMENT=development
      - FLASK_ENV=development
      - FLASK_DEBUG=true
    volumes:
      - ./credentials:/app/credentials:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - firestore-emulator
    networks:
      - tts-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devpassword}
    volumes:
      - redis-data:/data
    networks:
      - tts-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Firestore emulator for local development
  firestore-emulator:
    image: google/cloud-sdk:latest
    ports:
      - "8081:8081"
    command: >
      sh -c "
        gcloud components install cloud-firestore-emulator --quiet &&
        gcloud beta emulators firestore start --host-port=0.0.0.0:8081
      "
    environment:
      - FIRESTORE_PROJECT_ID=${GOOGLE_CLOUD_PROJECT:-your-project-id}
    networks:
      - tts-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - tts-api
    networks:
      - tts-network
    restart: unless-stopped
    profiles:
      - proxy

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - tts-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - tts-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - tts-network
    restart: unless-stopped
    profiles:
      - tracing

  # Testing service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    command: python -m pytest tests/ -v --tb=short --cov=src --cov-report=html:/app/coverage
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-your-project-id}
      - PYTHONPATH=/app
      - TESTING=true
    volumes:
      - .:/app
      - ./coverage:/app/coverage
    networks:
      - tts-network
    profiles:
      - testing

  # Load testing with K6
  load-test:
    image: loadimpact/k6:latest
    command: run --vus 10 --duration 30s /scripts/load-test.js
    volumes:
      - ./tests/performance:/scripts
    environment:
      - API_BASE_URL=http://tts-api:8080
    depends_on:
      - tts-api
    networks:
      - tts-network
    profiles:
      - load-testing

# Networks
networks:
  tts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Configs for different environments
# Development
x-development: &development
  ENVIRONMENT: development
  FLASK_ENV: development
  FLASK_DEBUG: true
  LOG_LEVEL: DEBUG

# Production
x-production: &production
  ENVIRONMENT: production
  FLASK_ENV: production
  FLASK_DEBUG: false
  LOG_LEVEL: INFO